int color[7] = {0};// R G B RG R GB RGB
int led[10][3];// [x][0]은 red [x][1]은 green [x][2]는 blue
#define R1 2 //RED
#define R2 3
#define R3 4
#define R4 5
#define R5 6
#define R6 7
#define R7 8
#define R8 9
#define R9 10
#define R10 11

#define G1 12 //GREEN
#define G2 13
#define G3 14
#define G4 15
#define G5 16
#define G6 17
#define G7 18
#define G8 19
#define G9 20
#define G10 21

#define B1 22 //BLUE
#define B2 23
#define B3 24
#define B4 25
#define B5 26
#define B6 27
#define B7 28
#define B8 29
#define B9 30
#define B10 31

#define BUTTON1 32 //BUTTON
#define BUTTON2 33
#define BUTTON3 34
#define BUTTON4 35
#define BUTTON5 36
#define BUTTON6 37
#define BUTTON7 38
#define BUTTON8 39
#define BUTTON9 40
#define BUTTON10 41
#define BUTTON_D 45//난이도 변경버튼
#define BUTTON_S 47//시작버튼
int R_diff,G_diff,B_diff;//난이도 설정 후 라이프 지정하기 위한 변수
int d=0;//difficulty 설정하기 위한 변수
int t=0;//난이도 설정 전 시작되지 않게 하기 위한 변수 t>0 이어야만 시작할 수 있음
bool state_d=false;
int dif=0;//칼라 켜지는 속도조절하기 위한 변수
int del=0;//칼라 다 켜진 후 몇초동안 켜져있나 확인하기 위한 변수
int life=0;//목숨
int trial=0;//시도횟수 - 라이프보다 시도횟수가 크다면 게임오버
int clear_game=0;//게임 클리어한지 오버인지 확인하기 위한 변수
int dif_loop_temp = 0;//난이도설정 완료하면 더이상 난이도설정 못하게 하기 위한 변수 1이면 난이도설정 완료
void diff_loop(){//난이도 설정 전에 깜빡깜빡거리기
  int i;
  for(i = 42;i<=44;i++){
    digitalWrite(i,HIGH);
    delay(100);
    digitalWrite(42,LOW);digitalWrite(43,LOW);digitalWrite(44,LOW);
  }
    if(i==44)
    i=42;
}
void difficulty(){//난이도 설정 - 초록:쉬움 파랑:보통 빨강:어려움
  if(digitalRead(BUTTON_D)==LOW){
    digitalWrite(42,LOW);digitalWrite(43,LOW);digitalWrite(44,LOW);
    digitalWrite(44-d,HIGH);
    d++;
    if(d==3)
    d=0;
    t++;//난이도 설정 전 시작되지 않게함 한번이라도 눌러야 시작버튼 실행 가능
    delay(500);
  }
    if(digitalRead(BUTTON_S)==LOW&&t>0){//t>0 이어야만 시작할 수 있음
      if(d==0){//빨강이면 최강난이도
      dif= 2;//dif는 칼라 켜지는 속도조절
      del=300;//del은 칼라 다 켜진 후 몇초동안 켜져있는지
      life = 3;R_diff=1;G_diff=0;B_diff=0;}
      else if(d==2){//파랑이면 보통난이도
      dif = 4;
      del=600;
      life = 4;R_diff=0;G_diff=0;B_diff=1;}
      else if(d==1){//초록이면 쉬움난이도
      dif = 9;
      del=900;
      life = 5;R_diff=0;G_diff=1;B_diff=0;}
    }
  
}   
void rgb_color_num()//무슨색깔이 각 몇개씩 있는지 랜덤으로 설정하는 함수
{//R+G+B+RG+RB+GB+RGB = 10이 되는 랜덤수 출력 - 이들은 1이 될 수 없고  0,2만 가능
  int i=0;
  int j=0;
  int sum = 0;
  int reset = 0;
 
  for(reset = 0;reset < 7; reset++)//color 초기화
        color[reset] = 0;
  
  while(1){
    randomSeed(analogRead(A0));
    color[i] = random(3);//0~2까지 뽑음
    
    for(j=0;j<7;j++)//모든 수 더한값
      sum += color[j];
      
    if(color[i] == 1){//만약 1이 뽑히면 처음부터 다시시작 
        rgb_color_num();
        break;
    } 
    if(sum == 10)//더한값이 10이라면 루프 끝
      break;

    else if(sum == 9){//만약 더한값이 9면 처음부터 다시시작
      rgb_color_num();
      break;
    }
    else if(i==7 && sum <10){//다 돌렸는데 10이 되지않으면 처음부터 다시
      rgb_color_num();
      break;
    }
    else if(sum > 10){//더한값이 10보다 크다면 다시시작
      rgb_color_num();
      break;
    }

    sum = 0;//sum 초기화
    i++;//횟수 더함
  }
}
bool led_array[10][3] = {0};//처음 led 세팅을 위한 배열
void printMatrix(){//LED 쉽게켜기위한 매트릭스
  if(led_array[0][0] == true) digitalWrite(R1,HIGH);if(led_array[1][0] == true) digitalWrite(R2,HIGH);if(led_array[2][0] == true) digitalWrite(R3,HIGH);if(led_array[3][0] == true) digitalWrite(R4,HIGH);if(led_array[4][0] == true) digitalWrite(R5,HIGH);
  if(led_array[5][0] == true) digitalWrite(R6,HIGH);if(led_array[6][0] == true) digitalWrite(R7,HIGH);if(led_array[7][0] == true) digitalWrite(R8,HIGH);if(led_array[8][0] == true) digitalWrite(R9,HIGH);if(led_array[9][0] == true) digitalWrite(R10,HIGH);
  
  if(led_array[0][1] == true) digitalWrite(G1,HIGH);if(led_array[1][1] == true) digitalWrite(G2,HIGH);if(led_array[2][1] == true) digitalWrite(G3,HIGH);if(led_array[3][1] == true) digitalWrite(G4,HIGH);if(led_array[4][1] == true) digitalWrite(G5,HIGH);
  if(led_array[5][1] == true) digitalWrite(G6,HIGH);if(led_array[6][1] == true) digitalWrite(G7,HIGH);if(led_array[7][1] == true) digitalWrite(G8,HIGH);if(led_array[8][1] == true) digitalWrite(G9,HIGH);if(led_array[9][1] == true) digitalWrite(G10,HIGH);
  
  if(led_array[0][2] == true) digitalWrite(B1,HIGH);if(led_array[1][2] == true) digitalWrite(B2,HIGH);if(led_array[2][2] == true) digitalWrite(B3,HIGH);if(led_array[3][2] == true) digitalWrite(B4,HIGH);if(led_array[4][2] == true) digitalWrite(B5,HIGH);
  if(led_array[5][2] == true) digitalWrite(B6,HIGH);if(led_array[6][2] == true) digitalWrite(B7,HIGH);if(led_array[7][2] == true) digitalWrite(B8,HIGH);if(led_array[8][2] == true) digitalWrite(B9,HIGH);if(led_array[9][2] == true) digitalWrite(B10,HIGH);  
}
bool bled_array[10][3] = {0};//led_array와 비교하기 위한 배열
void button_led_Matrix(){//LED 쉽게켜기위한 매트릭스
  if(bled_array[0][0] == true) digitalWrite(R1,HIGH);if(bled_array[1][0] == true) digitalWrite(R2,HIGH);if(bled_array[2][0] == true) digitalWrite(R3,HIGH);if(bled_array[3][0] == true) digitalWrite(R4,HIGH);if(bled_array[4][0] == true) digitalWrite(R5,HIGH);
  if(bled_array[5][0] == true) digitalWrite(R6,HIGH);if(bled_array[6][0] == true) digitalWrite(R7,HIGH);if(bled_array[7][0] == true) digitalWrite(R8,HIGH);if(bled_array[8][0] == true) digitalWrite(R9,HIGH);if(bled_array[9][0] == true) digitalWrite(R10,HIGH);
  
  if(bled_array[0][1] == true) digitalWrite(G1,HIGH);if(bled_array[1][1] == true) digitalWrite(G2,HIGH);if(bled_array[2][1] == true) digitalWrite(G3,HIGH);if(bled_array[3][1] == true) digitalWrite(G4,HIGH);if(bled_array[4][1] == true) digitalWrite(G5,HIGH);
  if(bled_array[5][1] == true) digitalWrite(G6,HIGH);if(bled_array[6][1] == true) digitalWrite(G7,HIGH);if(bled_array[7][1] == true) digitalWrite(G8,HIGH);if(bled_array[8][1] == true) digitalWrite(G9,HIGH);if(bled_array[9][1] == true) digitalWrite(G10,HIGH);
  
  if(bled_array[0][2] == true) digitalWrite(B1,HIGH);if(bled_array[1][2] == true) digitalWrite(B2,HIGH);if(bled_array[2][2] == true) digitalWrite(B3,HIGH);if(bled_array[3][2] == true) digitalWrite(B4,HIGH);if(bled_array[4][2] == true) digitalWrite(B5,HIGH);
  if(bled_array[5][2] == true) digitalWrite(B6,HIGH);if(bled_array[6][2] == true) digitalWrite(B7,HIGH);if(bled_array[7][2] == true) digitalWrite(B8,HIGH);if(bled_array[8][2] == true) digitalWrite(B9,HIGH);if(bled_array[9][2] == true) digitalWrite(B10,HIGH);  
}
bool mled_array[10][3] = {1};//color_match하고 오답 시 끄기 위한 배열
void match_led_Matrix(){//LED 쉽게끄기위한 매트릭스
  if(mled_array[0][0] == false) digitalWrite(R1,LOW);if(mled_array[1][0] == false) digitalWrite(R2,LOW);if(mled_array[2][0] == false) digitalWrite(R3,LOW);if(mled_array[3][0] == false) digitalWrite(R4,LOW);if(mled_array[4][0] == false) digitalWrite(R5,LOW);
  if(mled_array[5][0] == false) digitalWrite(R6,LOW);if(mled_array[6][0] == false) digitalWrite(R7,LOW);if(mled_array[7][0] == false) digitalWrite(R8,LOW);if(mled_array[8][0] == false) digitalWrite(R9,LOW);if(mled_array[9][0] == false) digitalWrite(R10,LOW);
  
  if(mled_array[0][1] == false) digitalWrite(G1,LOW);if(mled_array[1][1] == false) digitalWrite(G2,LOW);if(mled_array[2][1] == false) digitalWrite(G3,LOW);if(mled_array[3][1] == false) digitalWrite(G4,LOW);if(mled_array[4][1] == false) digitalWrite(G5,LOW);
  if(mled_array[5][1] == false) digitalWrite(G6,LOW);if(mled_array[6][1] == false) digitalWrite(G7,LOW);if(mled_array[7][1] == false) digitalWrite(G8,LOW);if(mled_array[8][1] == false) digitalWrite(G9,LOW);if(mled_array[9][1] == false) digitalWrite(G10,LOW);
  
  if(mled_array[0][2] == false) digitalWrite(B1,LOW);if(mled_array[1][2] == false) digitalWrite(B2,LOW);if(mled_array[2][2] == false) digitalWrite(B3,LOW);if(mled_array[3][2] == false) digitalWrite(B4,LOW);if(mled_array[4][2] == false) digitalWrite(B5,LOW);
  if(mled_array[5][2] == false) digitalWrite(B6,LOW);if(mled_array[6][2] == false) digitalWrite(B7,LOW);if(mled_array[7][2] == false) digitalWrite(B8,LOW);if(mled_array[8][2] == false) digitalWrite(B9,LOW);if(mled_array[9][2] == false) digitalWrite(B10,LOW);  
}
bool sled_array[10][3] = {0};//set led 위한 배열
void set_led_Matrix(){//LED 쉽게켜기위한 매트릭스
  if(sled_array[0][0] == true) digitalWrite(R1,HIGH);if(sled_array[1][0] == true) digitalWrite(R2,HIGH);if(sled_array[2][0] == true) digitalWrite(R3,HIGH);if(sled_array[3][0] == true) digitalWrite(R4,HIGH);if(sled_array[4][0] == true) digitalWrite(R5,HIGH);
  if(sled_array[5][0] == true) digitalWrite(R6,HIGH);if(sled_array[6][0] == true) digitalWrite(R7,HIGH);if(sled_array[7][0] == true) digitalWrite(R8,HIGH);if(sled_array[8][0] == true) digitalWrite(R9,HIGH);if(sled_array[9][0] == true) digitalWrite(R10,HIGH);
  
  if(sled_array[0][1] == true) digitalWrite(G1,HIGH);if(sled_array[1][1] == true) digitalWrite(G2,HIGH);if(sled_array[2][1] == true) digitalWrite(G3,HIGH);if(sled_array[3][1] == true) digitalWrite(G4,HIGH);if(sled_array[4][1] == true) digitalWrite(G5,HIGH);
  if(sled_array[5][1] == true) digitalWrite(G6,HIGH);if(sled_array[6][1] == true) digitalWrite(G7,HIGH);if(sled_array[7][1] == true) digitalWrite(G8,HIGH);if(sled_array[8][1] == true) digitalWrite(G9,HIGH);if(sled_array[9][1] == true) digitalWrite(G10,HIGH);
  
  if(sled_array[0][2] == true) digitalWrite(B1,HIGH);if(sled_array[1][2] == true) digitalWrite(B2,HIGH);if(sled_array[2][2] == true) digitalWrite(B3,HIGH);if(sled_array[3][2] == true) digitalWrite(B4,HIGH);if(sled_array[4][2] == true) digitalWrite(B5,HIGH);
  if(sled_array[5][2] == true) digitalWrite(B6,HIGH);if(sled_array[6][2] == true) digitalWrite(B7,HIGH);if(sled_array[7][2] == true) digitalWrite(B8,HIGH);if(sled_array[8][2] == true) digitalWrite(B9,HIGH);if(sled_array[9][2] == true) digitalWrite(B10,HIGH);  
}

int arr[10];//순서 정하기
void color_sequence(){//r g b 색깔의 순서 랜덤으로 섞기위한 함수
  int i,j;
  for(i=0;i<10;i++){//rgb 랜덤으로 뜨게하기 위해 순서정함
    arr[i] = random(10);
    for(j=0;j<i;j++){
      if(arr[j] == arr[i])
        i--;
    }
  }
}

void set_led(){//R G B RG RB GB RGB 세팅
  int i;//arr배열이 랜덤으로 배정 <- 이것을 순서대로 넣었음 = LED 랜덤
  int j = 0;
  for(i=0;i<color[0];i++){//RED
    led_array[arr[j]][0] = 1;
    j++;
  }
  for(i=0;i<color[1];i++){//GREEN
    led_array[arr[j]][1] = 1;
    j++;
  }
  for(i=0;i<color[2];i++){//BLUE
    led_array[arr[j]][2] = 1;
    j++;
  }
  for(i=0;i<color[3];i++){//RG
    led_array[arr[j]][0] = 1;
    led_array[arr[j]][1] = 1;
    j++;
  }
  for(i=0;i<color[4];i++){//RB
    led_array[arr[j]][0] = 1;
    led_array[arr[j]][2] = 1;
    j++;
  }
  for(i=0;i<color[5];i++){//GB
    led_array[arr[j]][1] = 1;
    led_array[arr[j]][2] = 1;
    j++;
  }
  for(i=0;i<color[6];i++){//RGB
    led_array[arr[j]][0] = 1;
    led_array[arr[j]][1] = 1;
    led_array[arr[j]][2] = 1;
    j++;
  }
}

int r=0,g=0,b=0,rg=0,rb=0,gb=0,rgb=0,error=0;
int led_seq;//led sequence 순서대로 키기 위한 변수
void turn_on_led(){//led 순서대로 켜지기
  int i,j;
  led_seq = 0;
for(led_seq=9;led_seq>=0;led_seq--){
      if(led_array[led_seq][0] == true){//R= HIGH
        sled_array[led_seq][0] = true;
        if(led_array[led_seq][1] == true){//R=HIGH,G=HIGH
          sled_array[led_seq][1] = true;
          if(led_array[led_seq][2] == true){//R1=HIGH,G=HIGH,B=HIGH
            sled_array[led_seq][2] = true;
          }
          else{//R=HIGH, G=HIGH, B=LOW
          }
        }
        else{//R= HIGH G은 LOW
          if(led_array[led_seq][2] == true){//R1=HIGH,G1=LOW,B1=HIGH
            sled_array[led_seq][2] = true;
          }
          else{//R만 HIGH이면
          }
        }
      }
      else{//R은 LOW이면
        if(led_array[led_seq][1] == true){//R=LOW,G=HIGH
          sled_array[led_seq][1] = true;
          if(led_array[led_seq][2] == true){//R=LOW,G=HIGH,B=HIGH
          sled_array[led_seq][2] = true;}
          else{//R=LOW,G=HIGH,B=LOW
          }
        }
        else{//R=LOW,G=LOW
          if(led_array[led_seq][2] == true){//R=LOW,G=LOW,B=HIGH
          sled_array[led_seq][2] = true;}
        }
        }
        set_led_Matrix();
        for(i=0;i<10;i++){
          for(j=0;j<3;j++){
            bled_array[i][j] = false;
            delay(dif);
        }
          }
        }
}

int btn;
bool button[10];
int r_temp,g_temp,b_temp,rg_temp,rb_temp,gb_temp,rgb_temp;
bool state_one=false;bool state_two=false;bool state_three=false;bool state_four=false;bool state_five=false;
bool state_six=false;bool state_seven=false;bool state_eight=false;bool state_nine=false;bool state_ten=false;
int memory_button[2];//무슨 버튼 눌렸는지 저장하기 위한 배열
int count=0;//버튼 누른 횟수 count가 2가 되면 color_match 시작
int score=0;//스코어가 5가 되면 게임 클리어
int temp[10] = {0};//켜져있는 버튼 다시 클릭 못하게 하기 위한 배열
int over[10] = {0};//같은 버튼 두개 클릭 못하게 하기 위한 배열
void button_match(){//버튼 눌러서 맞는지 확인 토큰 활용
if(digitalRead(BUTTON1) == LOW && state_one == false&&temp[0] == 0&&over[0] == 0){btn=1-1;state_one = true;count++;button_match_eq();delay(10);}
if(digitalRead(BUTTON2) == LOW && state_two == false&&temp[1] == 0&&over[1] == 0){btn=2-1;state_two=true;count++;button_match_eq();delay(10);}
if(digitalRead(BUTTON3) == LOW && state_three == false&&temp[2] == 0&&over[2] == 0){btn=3-1;state_three=true;count++;button_match_eq();delay(10);}
if(digitalRead(BUTTON4) == LOW && state_four == false&&temp[3] == 0&&over[3] == 0){btn=4-1;state_four = true;count++;button_match_eq();delay(10);}
if(digitalRead(BUTTON5) == LOW && state_five == false&&temp[4] == 0&&over[4] == 0){btn=5-1;state_five=true;count++;button_match_eq();delay(10);}
if(digitalRead(BUTTON6) == LOW && state_six == false&&temp[5] == 0&&over[5] == 0){btn=6-1;state_six=true;count++;button_match_eq();delay(10);}
if(digitalRead(BUTTON7) == LOW && state_seven == false&&temp[6] == 0&&over[6] == 0){btn=7-1;state_seven = true;count++;button_match_eq();delay(10);}
if(digitalRead(BUTTON8) == LOW && state_eight == false&&temp[7] == 0&&over[7] == 0){btn=8-1;state_eight=true;count++;button_match_eq();delay(10);}
if(digitalRead(BUTTON9) == LOW && state_nine == false&&temp[8] == 0&&over[8] == 0){btn=9-1;state_nine=true;count++;button_match_eq();delay(10);}
if(digitalRead(BUTTON10)== LOW && state_ten == false&&temp[9] == 0&&over[9] == 0){btn=10-1;state_ten= true;count++;button_match_eq();delay(10);}

if(digitalRead(BUTTON1)==HIGH && state_one == true){state_one = false;delay(10);}if(digitalRead(BUTTON2)==HIGH && state_two == true){state_two = false;delay(10);}if(digitalRead(BUTTON3)==HIGH && state_three == true){state_three = false;delay(10);}
if(digitalRead(BUTTON4)==HIGH && state_four == true){state_four = false;delay(10);}if(digitalRead(BUTTON5)==HIGH && state_five == true){state_five = false;delay(10);}if(digitalRead(BUTTON6)==HIGH && state_six == true){state_six = false;delay(10);}
if(digitalRead(BUTTON7)==HIGH && state_seven == true){state_seven = false;delay(10);}if(digitalRead(BUTTON8)==HIGH && state_eight == true){state_eight = false;delay(10);}if(digitalRead(BUTTON9)==HIGH && state_nine == true){state_nine = false;delay(10);}
if(digitalRead(BUTTON10)==HIGH && state_ten == true){state_ten = false;delay(10);}
}
void button_match_eq(){//버튼매치 식  ex)1번버튼 눌리면 1번버튼이 무슨 색인지 저장해놓는다.
  if(led_array[btn][0] == true){//R= HIGH
        bled_array[btn][0] = true;
        if(led_array[btn][1] == true){//R=HIGH,G=HIGH
          bled_array[btn][1] = true;
          if(led_array[btn][2] == true){//R1=HIGH,G=HIGH,B=HIGH
            bled_array[btn][2] = true;
            rgb++;
          }
          else{//R=HIGH, G=HIGH, B=LOW
            rg++;
          }
        }
        else{//R= HIGH G은 LOW
          if(led_array[btn][2] == true){//R1=HIGH,G1=LOW,B1=HIGH
            bled_array[btn][2] = true;
            rb++;
          }
          else{//R만 HIGH이면
            r++;
          }
        }
      }
      else{//R은 LOW이면
        if(led_array[btn][1] == true){//R=LOW,G=HIGH
          bled_array[btn][1] = true;
          if(led_array[btn][2] == true){//R=LOW,G=HIGH,B=HIGH
          bled_array[btn][2] = true;
            gb++;
            }
          else{//R=LOW,G=HIGH,B=LOW
            g++;
          }
        }
        else{//R=LOW,G=LOW
          if(led_array[btn][2] == true){//R=LOW,G=LOW,B=HIGH
          bled_array[btn][2] = true;
            b++;
            }
          else//R,G,B == LOW ERROR
            error++;
        }
        }
        if(r>0||g>0||b>0||rg>0||rb>0||gb>0||rgb>0){
          over[btn] = 1;
        }
        button_led_Matrix();//한 버튼이 눌리면 그 버튼이 무슨색인지 확인 후 led켜줌
        init_bled_array();//저장해 놓은 값 초기화시킨다.
        memory_button[count-1]=btn;//무슨 버튼이 눌렸는지 memory_button에 저장
        if(count == 2){
          color_match();
        }
      
        delay(10);
}

void all_led_off(){
  int i;
  for(i=2;i<=31;i++)
  digitalWrite(i,LOW);
}

void init_led_array(){
  int i,j;
  for(i=0;i<10;i++){
    for(j=0;j<3;j++){
      led_array[i][j] = false;
    }
  }
}
void init_bled_array(){
  int i,j;
  for(i=0;i<10;i++){
    for(j=0;j<3;j++){
      bled_array[i][j] = false;
    }
  }
}
void init_mled_array(){
  int i,j;
  for(i=0;i<10;i++){
    for(j=0;j<3;j++){
      mled_array[i][j] = true;
    }
  }
}
void init_sled_array(){
  int i,j;
  for(i=0;i<10;i++){
    for(j=0;j<3;j++){
      sled_array[i][j] = false;
    }
  }
}
void color_match(){//두 버튼 눌렀을때 색깔이 맞는지 확인하기 위한 함수
    if((r==color[0]&&r!=0)||(g==color[1]&&g!=0)||(b==color[2]&&b!=0)||(rg==color[3]&&rg!=0)||(rb==color[4]&&rb!=0)||(gb==color[5]&&gb!=0)||(rgb==color[6]&&rgb!=0)){//누른색상이 칼라색상과 같다면 성공
    score++;
    count=0;
    if(memory_button[0]==0)temp[0] = 1;if(memory_button[0]==1)temp[1] = 1;if(memory_button[0]==2)temp[2] = 1;if(memory_button[0]==3)temp[3] = 1;if(memory_button[0]==4)temp[4] = 1;
    if(memory_button[0]==5)temp[5] = 1;if(memory_button[0]==6)temp[6] = 1;if(memory_button[0]==7)temp[7] = 1;if(memory_button[0]==8)temp[8] = 1;if(memory_button[0]==9)temp[9] = 1;

    if(memory_button[1]==0)temp[0] = 1;if(memory_button[1]==1)temp[1] = 1;if(memory_button[1]==2)temp[2] = 1;if(memory_button[1]==3)temp[3] = 1;if(memory_button[1]==4)temp[4] = 1;
    if(memory_button[1]==5)temp[5] = 1;if(memory_button[1]==6)temp[6] = 1;if(memory_button[1]==7)temp[7] = 1;if(memory_button[1]==8)temp[8] = 1;if(memory_button[1]==9)temp[9] = 1;

    init_mled_array();
    for(int i=0;i<10;i++)
      over[i] = 0;
    r=0;g=0;b=0;rg=0;rb=0;gb=0;rgb=0;//초기화
    }
    else{//아니라면 실패
      mled_array[memory_button[0]][0] = false;//눌렀던 버튼들을 꺼준다.
      mled_array[memory_button[0]][1] = false;
      mled_array[memory_button[0]][2] = false;
      mled_array[memory_button[1]][0] = false;
      mled_array[memory_button[1]][1] = false;
      mled_array[memory_button[1]][2] = false;
      delay(500);
      match_led_Matrix();
      delay(10);
      init_mled_array();
      for(int i=0;i<10;i++)
        over[i] = 0;//초기화
      r=0;g=0;b=0;rg=0;rb=0;gb=0;rgb=0;//초기화
      trial++;//실패횟수 1 추가
    }
    count = 0;//시도횟수 초기화
}
int answer;
void answer_set(){
  int i;
  for(i=0;i<7;i++){//정답이 몇개인지//항상 5개이긴 함
    if(color[i]>0)
    answer++;
  }
}
int loading(){//로딩 이쁘장한 함수
  int i;
  for(i=2;i<=31;i++){
  delay(50);
  digitalWrite(i,HIGH);}
  for(i=2;i<=31;i++){
    delay(50);
  digitalWrite(i,LOW);
  }
    
}
   
 char lifenum[5] = {A15,A14,A13,A12,A11};//라이프 그린5개
void life_set(){//라이프 세팅
  if(R_diff==1)
  life = 3;
  else if(B_diff==1)
  life = 4;
  else if(G_diff==1)
  life = 5;
  for(int i=0;i<5;i++){
    analogWrite(lifenum[i],0);
  }
    for(int i=0;i<life-trial;i++){//실패횟수마다 그린LED 하나씩 꺼줌
    analogWrite(lifenum[i],255);
  }
}
void life_init(){//라이프 초기화
  for(int i=0;i<5;i++){
    analogWrite(lifenum[i],0);
  }
}


void setup() { 
    Serial.begin(9600);
    for(int i=2;i<32;i++) //2~11은RED 12~21은GREEN 22~31은BLUE를 연결함
      pinMode(i,OUTPUT);
    for(int i=42;i<=44;i++) //42~44 난이도조절 led
      pinMode(i,OUTPUT);

    for(int i=32;i<42;i++) //32~41,45은 푸쉬버튼 연결
     pinMode(i,INPUT);
     pinMode(45,INPUT_PULLUP);
     pinMode(47,INPUT_PULLUP);
     pinMode(A11,OUTPUT);
     pinMode(A12,OUTPUT);
     pinMode(A13,OUTPUT);
     pinMode(A14,OUTPUT);
     pinMode(A15,OUTPUT);
   }
   

  
void loop() {
    int i;
    all_led_off();//모든 LED 끄고
    life_init();//라이프 초기화시킨다.
   
    while(1){//난이도설정 시작
      if(dif_loop_temp == 0){
      while(1){ 
        diff_loop();
        if(digitalRead(BUTTON_D) == LOW)
          dif_loop_temp = 1;
          break;
        }
      }
      difficulty();
      Serial.println(d);
      if(dif > 0)
      break;
    }//난이도설정 끝
    
    life_set();//라이프 세팅
    delay(1000);
    loading();//로딩중..
    delay(1000);
    all_led_off();//모든 led 끄기
    score=0;//초기화
    count=0;
    trial=0;
    rgb_color_num();//무슨 색상 뽑을것인지 랜덤
    color_sequence();//칼라 순서정하기
    set_led();//led 순서정하기
    turn_on_led();//led 켜기
    answer_set();//정답 몇개인지
    delay(del);//led가 몇초동안 켜져있는지 < 딜레이는 난이도마다 다름
    all_led_off();//모든 led 끔
    
    while(1){
      button_match();//버튼누르면 정답인지 확인
      life_set();
      Serial.print("score");Serial.println(score);
      Serial.print("count");Serial.println(count);
      Serial.print("btn");Serial.println(btn);
      Serial.println(memory_button[count]);
      Serial.print("answer");Serial.println(answer);
      Serial.print("life");Serial.println(life);
      for(i=0;i<7;i++)
      Serial.println(color[i]);
      if(score==answer){//만약 맞춘 횟수가 정답과 같다면 클리어
        clear_game=1;
          break;
      }
      if(trial >= life){//실패횟수가 목숨갯수보다 많다면 게임오버
        clear_game=0;
          break;
      }
    }
    life_init();//라이프 초기화

 if(clear_game==1){//게임 클리어했을때 이벤트
    printMatrix();
    delay(500);
    all_led_off();
    delay(500);
    printMatrix();
    delay(500);
    all_led_off();
    delay(500);
    printMatrix();
    delay(500);
    all_led_off();
    delay(500);
    printMatrix();
    delay(500);
 }
 else{//게임오버 했을 때 이벤트
  all_led_off();
  for(i=2;i<12;i++)
  digitalWrite(i,HIGH);
  delay(500);
  all_led_off();
  delay(500);
  for(i=2;i<12;i++)
  digitalWrite(i,HIGH);
  delay(500);
  all_led_off();
  delay(500);
  for(i=2;i<12;i++)
  digitalWrite(i,HIGH);
  delay(500);
  all_led_off();
  delay(500);
 }
    dif = 0;//초기화
    init_led_array();
    init_bled_array();
    init_mled_array();
    init_sled_array();
    answer = 0;
    trial = 0;
    for(i=0;i<10;i++)
      temp[i] = 0;
}